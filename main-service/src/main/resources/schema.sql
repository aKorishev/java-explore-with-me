CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(250) NOT NULL,
  email VARCHAR(254),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

---

CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(50),
  CONSTRAINT pk_categories PRIMARY KEY (id),
  CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
);

--

CREATE TABLE IF NOT EXISTS events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(120) NOT NULL,
  annotation VARCHAR(2000),
  description VARCHAR(7000) NOT NULL,
  cat_id BIGINT NOT NULL,
  participant_limit INTEGER NOT NULL,
  state VARCHAR(20) NOT NULL,
  paid BOOLEAN NOT NULL,
  event_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  published_on TIMESTAMP WITHOUT TIME ZONE,
  initiator_id BIGINT NOT NULL,
  latitude FLOAT NOT NULL,
  longitude FLOAT NOT NULL,
  req_moderation BOOLEAN NOT NULL,
  CONSTRAINT pk_events PRIMARY KEY (id),
  CONSTRAINT FK_EVENTS_ON_CAT FOREIGN KEY (cat_id) REFERENCES categories (id),
  CONSTRAINT FK_EVENTS_ON_INITIATOR FOREIGN KEY (initiator_id) REFERENCES users (id)
);

--

CREATE TABLE IF NOT EXISTS participation_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  requester_id BIGINT,
  event_id BIGINT,
  status VARCHAR(50) NOT NULL,
  created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  CONSTRAINT pk_participation_requests PRIMARY KEY (id),
  CONSTRAINT FK_PARTICIPATION_REQUESTS_ON_EVENT FOREIGN KEY (event_id) REFERENCES events (id),
  CONSTRAINT FK_PARTICIPATION_REQUESTS_ON_REQUESTER FOREIGN KEY (requester_id) REFERENCES users (id),
  CONSTRAINT UQ_PARTICIPANT_PER_EVENT UNIQUE (requester_id, event_id)
);

--

CREATE TABLE IF NOT EXISTS compilations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  title VARCHAR(50),
  pinned BOOLEAN NOT NULL,
  CONSTRAINT pk_compilation PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS compilation_of_events (
  comp_id BIGINT NOT NULL,
  event_id BIGINT NOT NULL,
  CONSTRAINT pk_compilation_of_events PRIMARY KEY (comp_id, event_id),
  CONSTRAINT fk_comofeve_on_compilation FOREIGN KEY (comp_id) REFERENCES compilations (id),
  CONSTRAINT fk_comofeve_on_event FOREIGN KEY (event_id) REFERENCES events (id)
);
--
-- --
--
-- -- эту функцию дадим прекодом, я расписал алгоритм, но в целом можно особо на ней не акцентироваться.
-- CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
--     RETURNS float
-- AS
-- '
-- declare
-- 	dist float = 0;
--     rad_lat1 float;
--     rad_lat2 float;
--     theta float;
--     rad_theta float;
-- BEGIN
--     IF lat1 = lat2 AND lon1 = lon2
--     THEN
--         RETURN dist;
--     ELSE
--         -- переводим градусы широты в радианы
--         rad_lat1 = pi() * lat1 / 180;
--         -- переводим градусы долготы в радианы
--         rad_lat2 = pi() * lat2 / 180;
--         -- находим разность долгот
--         theta = lon1 - lon2;
--         -- переводим градусы в радианы
--         rad_theta = pi() * theta / 180;
--         -- находим длину ортодромии
--         dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);
--
--         IF dist > 1
--             THEN dist = 1;
--         END IF;
--
--         dist = acos(dist);
--         -- переводим радианы в градусы
--         dist = dist * 180 / pi();
--         -- переводим градусы в километры
--         dist = dist * 60 * 1.8524;
--
--         RETURN dist;
--     END IF;
-- END;
-- '
-- LANGUAGE PLPGSQL;